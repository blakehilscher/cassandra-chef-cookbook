# Cronjob:
#
# PATH=/usr/local/rbenv/shims:/usr/local/rbenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
# SHELL=/bin/bash
# 
# 0 21 * * * <%= node.cassandra.conf_dir %>/backup/restore.sh $(date +"%Y-%m-%d")/cassandra
# 0 22 * * * <%= node.cassandra.conf_dir %>/backup/restore_deploy.sh

keyspaces=(<%= node.cassandra.backup.keyspaces.keys.join(" ") %>)

CASS_PLACEMENT="<%= node.name.split('-').last %>"
S3_BUCKET_URL="s3://<%= node.cassandra.backup.bucket_name %>"
NODE_NAME="<%= node.name %>"

CASS_DIR="<%= node.cassandra.data_root_dir %>"
CASS_ROOT="<%= File.expand_path(File.join(node.cassandra.data_root_dir, '../')) %>"
CASS_LOG="<%= node.cassandra.log_dir %>"
DATA_DIR="$CASS_DIR/data/"

DATA_DIR_TMP="$CASS_ROOT/cassandra-downloading-restore"
RESTORE_FROM="$1-$CASS_PLACEMENT"
LOG_FILE="$CASS_LOG/restore.log"

# move previous restore download folder out of the way
mv $DATA_DIR_TMP "$DATA_DIR_TMP-failed-$(date +'%s')"

echo "starting recovery from: $S3_BUCKET_URL/$RESTORE_FROM into $DATA_DIR_TMP" >> $LOG_FILE

# for each keyspace
for keyspace in ${keyspaces[@]}; do
  echo "aws s3 sync $S3_BUCKET_URL/$RESTORE_FROM/${keyspace}/ $DATA_DIR_TMP/${keyspace}/" >> $LOG_FILE
  # make the missing directory
  mkdir -p "$DATA_DIR_TMP/${keyspace}/"
  # sync the backup data
  aws s3 sync "$S3_BUCKET_URL/$RESTORE_FROM/${keyspace}/" "$DATA_DIR_TMP/${keyspace}/" >> $LOG_FILE
done

# for each keyspace
for keyspace in ${keyspaces[@]}; do
  # for each keyspace table
  find "$DATA_DIR_TMP/${keyspace}" -maxdepth 1 -type d | while read -r dir; do
    # if there is a snapshot directory
    if [ -d "${dir}/snapshots" ]; then
      # move the contents of the snapshot
      echo "mv ${dir}/snapshots/*/* ${dir}" >> $LOG_FILE
      find "${dir}/snapshots" -maxdepth 2 -type f | while read -r file; do
        basefile=$(basename $file)
        # move the snapshot to it's parent folder
        mv $file "${dir}/$basefile"
      done
    fi
  done
done

echo "$(date) Restore downloaded! $S3_BUCKET_URL/$RESTORE_FROM" >> $LOG_FILE